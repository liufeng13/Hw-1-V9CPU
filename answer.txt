----------------------------------------------个人思考题-------------------------------------------------
1、分析你所认识的操作系统（Windows、Linux、FreeBSD、Android、iOS）所具有的独特和共性的功能？
答：(个人总结和百度资料)
Windows最大的特点就是GUI，用户非常容易上手使用，在软件数量和质量上占据优势。Windows操作系统的封闭性较强，几乎不开源。
Linux具有很好的开放性，能够适应多种不同场合的需要，对于配置新环境特别方便(Windows配置环境经常很麻烦)。同时linux开放源代码，对于编程人员和研究人员提供很好的环境支持。
FreeBSD系统纯净，性能高，和linux相比具有更好的安全性，适用于在服务器部署。  
Android是开放免费的移动端系统，应用数量较多，系统可以根据不同的需要进行定制，具有很好的兼容性。
iOS是封闭的移动端系统，运行效率高，应用的质量高，系统安全性较好。
共性：都是操作系统，对于下层硬件，能够通过命令行或GUI来管理硬件。对于上层应用，能够提供接口，控制程序的运行，进行资源的分配。

2、请总结你认为操作系统应该具有的特征有什么？并对其特征进行简要阐述。
答：(主要来自MOOC)
并发。并发是指在操作系统中会有多个应用程序同时运行，操作系统需要对其进行管理和调度。
共享。共享是指多个应用在宏观上可能会表现出“同时”使用资源，但是在微观上需要实现它们的互斥访问。
虚拟。利用多道程序技术，对于多用户使用的计算机，让用户感觉到有一台专门的计算机在对其提供服务。
异步。异步是指实际上程序是间断执行的，只要用户的输入不变，运行环境不变，那么程序的结果要应该保持一致。

3、请给出你觉得的更准确的操作系统的定义？
答：
操作系统是一个资源管理器，是计算机硬件和应用程序的中间层，它为计算机应用程序来管理所有的计算机软硬件资源，以协调于各个应用程序。

4、你希望从操作系统课学到什么知识？
答：
我希望了解操作系统的基本概念、操作系统的历史、特征、演变、工作原理和机制等。同时希望能初步掌握操作系统的编写方法。

5、什么是操作系统？
答：
操作系统是一个资源管理器，是计算机硬件和应用程序的中间层，它为计算机应用程序来管理所有的计算机软硬件资源，以协调于各个应用程序。

6、操作系统内核有什么特征？

7、操作系统面临什么挑战？
答：
存储设备的更新换代，硬件的变化导致操作系统必须不停地变更。

8、同学们用过什么操作系统？如何评价这些系统？
答：
见第一题。

9、你所知道的操作系统技术有什么？哪些是操作系统特有的？

10、什么是操作系统内核？什么是微内核？什么是外核（Exokernel）？

11、你理解的虚拟化是什么？

----------------------------------------------小组讨论题-------------------------------------------------
1、目前的台式PC机标准配置和价格？
答：
可能是：4核CPU。1G独显，500G硬盘，4G内存，其他的配件看个人。价格大概4500左右 ？

2、你理解的命令行接口和GUI接口具有哪些共性和不同的特征？
答：
共性：都能对系统进行操作
特征：GUI更易懂，容易上手，需要键盘加鼠标。命令行比较晦涩枯燥，有时效率更高，只需要键盘。

3、为什么现在的操作系统基本上用C语言来实现？
答：
C语言的出现就是为了写操作系统的。可移植性，更加高效。

4、为什么没有人用python，java来实现操作系统？
答：
效率低，java、python直接操作内存的语言做内存管理很困难。

5、请评价用C++来实现操作系统的利弊？
答：
可以用C++进行高层的编写(更适合)，C进行底层的编写。
----------------------------------------------开放思考题-------------------------------------------------
1、请评价微内核、单体内核、外核（exo-kernel）架构的操作系统的利弊？

2、请评价用LISP,OCcaml, GO, D，RUST等实现操作系统的利弊？

3、进程切换的可能实现思路？
答：
采用中断技术实现。

4、计算机与终端间通过串口通信的可能实现思路？

5、为什么微软的Windows没有在手机终端领域取得领先地位？
答：
我认为是因为Windows手机系统起步太晚，市场已经被其他系统占领，人们的观念也已经定格，或者说已经习惯。

6、你认为未来（10年内）的操作系统应该具有什么样的特征和功能？
答：
非移植性硬盘的出现会改变操作系统的存储特性(替代SSD和DISK)。硬件变化会促使操作系统的变化；应用需求，存储设计。
----------------------------------------------v9-cpu相关题目----------------------------------------------
1、
 - ssp:系统栈指针
 - usp:用户栈指针
 - cycle: xcycle/4
 - xcycle:用于判断是否换页 当xpc>xcycle时换页   (?)
 - timer: 计时器
 - timeout: 时间阈值，若timer超过此阈值则超时
 - detla: 每次循环的时间

2、时钟中断：计时器timer大于设置的超时时间阈值timeout，且中断使能iena=1。此时将错误编码trap设为FTIMER，iena置0，并跳转至中断处理

3、跳转相关操作：通过修改pc的值和xcycle的值来实现跳转。同时使用fixpc和next两个标签来判断是否产生异常(？？？)。若为B指令，需要判断条件是否满足，才进行PC的修改。若为J型指令，直接修改PC和xcycle进行跳转。

4、设计指令，实现调用和返回：可以设计成类似MIPS32中的 JRRA 指令。在调用前记录当前PC的值并保存在栈中，调用子函数时产生新的sp，然后调用结束后回复sp，再取出之前记录的PC值，即可实现返回。

5、emhello/os0/os1等程序被加载到内存的哪个位置,其堆栈是如何设置的：程序被加载到内存的起始位置。堆栈从底向上，往高地址增长。

6、在v9-cpu中如何完成一次内存地址的读写的：先查看TLB(读的话看tr，写的话看tw)，看地址是否存在于TLB中。如果存在，则直接使用。如果不存在，则调用rlook函数(读)或wlook函数(写)将相应的地址读入TLB中，然后，先访问地址的高10位读出page directory entry，其对应着一个页表page table。再用地址的中间十位访问page table，读出page table entry，从这个entry才推算出物理地址。   (参考了大家的解答，本身不是很清晰)

7、在v9-cpu中如何实现分页机制的：通过上一问得出物理地址，再加上虚拟地址的后12位(页内偏移量)。